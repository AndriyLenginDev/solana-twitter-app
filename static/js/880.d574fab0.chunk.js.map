{"version":3,"file":"static/js/880.d574fab0.chunk.js","mappings":"0PACA,GAAgB,cAAgB,iCAAiC,aAAe,gCAAgC,MAAQ,yBAAyB,OAAS,0BAA0B,QAAU,4B,qECoG9L,EAlFsC,SAAC,GAAgC,IAA9BA,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,YAC1CC,GAAcC,EAAAA,EAAAA,MAAdD,UACFE,GAAWC,EAAAA,EAAAA,KACjB,GAA8BC,EAAAA,EAAAA,UAAiB,IAA/C,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAiBL,GAAe,IAA1D,eAAOQ,EAAP,KAAcC,EAAd,KACA,GAA8BJ,EAAAA,EAAAA,WAAkB,GAAhD,eAAOK,EAAP,KAAgBC,EAAhB,MAEAC,EAAAA,EAAAA,YAAU,WACRH,EAAST,GAAe,MACvB,CAACA,IAEJ,IAQA,GAAsCa,EAAAA,EAAAA,GAAcP,EAASQ,EAAAA,IAArDC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,eAEbC,GAAgBC,EAAAA,EAAAA,UAAiB,WACrC,QAASlB,IACR,CAACA,IAEEmB,GAAeD,EAAAA,EAAAA,UAAiB,WACpC,OAAQZ,EAAQc,QAAUL,EAAY,IACrC,CAACT,EAASS,IAEPM,EAAI,yCAAG,WAAOC,GAAP,+EACXA,EAAEC,kBAEEb,EAHO,iEAMTC,GAAW,GANF,UAOWa,EAAAA,EAAAA,GAAUlB,EAASE,GAP9B,OAOHiB,EAPG,OAQTtB,EAASuB,EAAAA,GAAAA,SAAuBD,IAChClB,EAAW,IACXE,EAAST,GAAe,IAVf,2EAcTW,GAAW,GAdF,6EAAH,sDAkBV,OAAKV,GAKH,kBAAMF,UAAW,CAAC4B,EAAAA,cAAuB5B,GAAW6B,KAAK,KAAzD,WACE,SAACC,EAAA,EAAD,CACEC,YAAU,EACVC,YAAY,oBACZC,MAAO1B,EACP2B,SA9CmB,SAACX,GACxBf,EAAWe,EAAEY,OAAOF,WA+ClB,iBAAKjC,UAAW4B,EAAAA,aAAhB,WACE,SAACQ,EAAA,EAAD,CACEpC,UAAW4B,EAAAA,MACXS,KAAMC,EAAAA,EACNC,UAAWC,EAAAA,GACXC,SAAUvB,EACVe,MAAOxB,EACPyB,SAnDkB,SAACX,GACzBb,EAASa,EAAEY,OAAOF,WAoDd,iBAAKjC,UAAW4B,EAAAA,OAAhB,WACE,kBAAM5B,UAAW,CAAC4B,EAAAA,QAAiBX,GAAgBY,KAAK,KAAxD,UAA+Db,EAA/D,YACA,SAAC0B,EAAA,EAAD,CACED,SAAUrB,EACVT,QAASA,EACTgC,QAASrB,EAHX,6BAtBC,SAACsB,EAAA,EAAD,CAAUrC,QAAS,+C,gHChC9B,UA3BiB,WACf,IAAMI,GAAUkC,EAAAA,EAAAA,GAAeC,EAAAA,IACzBC,GAASF,EAAAA,EAAAA,GAAeG,EAAAA,IACxB5C,GAAWC,EAAAA,EAAAA,KAEX4C,GAAYC,EAAAA,EAAAA,cAAY,WAC5B9C,EAASuB,EAAAA,GAAAA,uBACR,CAACvB,IAQJ,OANAS,EAAAA,EAAAA,YAAU,WAER,OADAT,EAASuB,EAAAA,GAAAA,aACF,WACLvB,EAASuB,EAAAA,GAAAA,UAAwB,QAElC,CAACvB,KAEF,iCACE,SAAC,IAAD,KACA,SAAC,IAAD,CACE2C,OAAQA,EACRpC,QAASA,EACTsC,UAAWA","sources":["webpack://solana-twitter-app/./src/components/TweetForm/TweetForm.module.scss?f896","components/TweetForm/TweetForm.tsx","pages/Home.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form__wrapper\":\"TweetForm_form__wrapper__2kMtH\",\"form__footer\":\"TweetForm_form__footer__nPiA1\",\"topic\":\"TweetForm_topic__0Yyzd\",\"button\":\"TweetForm_button__n2Jop\",\"counter\":\"TweetForm_counter__8f62J\"};","import React, { FC, useEffect, useMemo, useState } from 'react';\nimport TextArea from '@/components/general/TextArea/TextArea';\nimport IconInput from '@/components/IconInput/IconInput';\nimport HashIcon from '@/components/icons/HashIcon';\nimport Button from '@/components/general/Button/Button';\nimport DataItem from '@/components/general/DataItem/DataItem';\nimport classes from './TweetForm.module.scss';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { useAppDispatch } from '@/hooks/useAppDispatch';\nimport { useCharsLimit } from '@/hooks/useCharsLimit';\nimport { tweetsActions } from '@/store/reducers/tweets';\nimport { CONTENT_MAX_CHARS, TOPIC_MAX_CHARS } from '@/web3/constants';\nimport { sendTweet } from '@/web3';\n\nexport interface TweetFormProps {\n  className?: string;\n  forcedTopic?: string;\n}\n\nconst TweetForm: FC<TweetFormProps> = ({ className, forcedTopic }) => {\n  const { connected } = useWallet();\n  const dispatch = useAppDispatch();\n  const [content, setContent] = useState<string>('');\n  const [topic, setTopic] = useState<string>(forcedTopic || '');\n  const [loading, setLoading] = useState<boolean>(false);\n\n  useEffect(() => {\n    setTopic(forcedTopic || '');\n  }, [forcedTopic]);\n\n  const handleTextChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setContent(e.target.value);\n  };\n\n  const handleTopicChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setTopic(e.target.value);\n  };\n\n  const { charsLeft, charsLeftClass } = useCharsLimit(content, CONTENT_MAX_CHARS);\n\n  const topicDisabled = useMemo<boolean>(() => {\n    return !!forcedTopic;\n  }, [forcedTopic]);\n\n  const sendDisabled = useMemo<boolean>(() => {\n    return !content.length || charsLeft < 0;\n  }, [content, charsLeft]);\n\n  const send = async (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n\n    if (loading) return;\n\n    try {\n      setLoading(true);\n      const tweet = await sendTweet(content, topic);\n      dispatch(tweetsActions.addTweet(tweet));\n      setContent('');\n      setTopic(forcedTopic || '');\n    } catch (error) {\n      // TODO: show error\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (!connected) {\n    return <DataItem content={'Connect your wallet to start tweeting...'} />;\n  }\n\n  return (\n    <form className={[classes.form__wrapper, className].join(' ')}>\n      <TextArea\n        autoresize\n        placeholder=\"What's happening?\"\n        value={content}\n        onChange={handleTextChange}\n      />\n      <div className={classes.form__footer}>\n        <IconInput\n          className={classes.topic}\n          Icon={HashIcon}\n          maxLength={TOPIC_MAX_CHARS}\n          disabled={topicDisabled}\n          value={topic}\n          onChange={handleTopicChange}\n        />\n        <div className={classes.button}>\n          <span className={[classes.counter, charsLeftClass].join(' ')}>{charsLeft} left</span>\n          <Button\n            disabled={sendDisabled}\n            loading={loading}\n            onClick={send}>\n            Tweet\n          </Button>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default TweetForm;\n","import React, {FC, useCallback, useEffect} from 'react';\nimport TweetForm from '@/components/TweetForm/TweetForm';\nimport TweetList from '@/components/TweetList/TweetList';\nimport { useAppSelector } from '@/hooks/useAppSelector';\nimport { useAppDispatch } from '@/hooks/useAppDispatch';\nimport { tweetsActions } from '@/store/reducers/tweets';\nimport { selectLoading, selectSortedTweets } from '@/store/reducers/tweets/selectors';\n\nconst Home: FC = () => {\n  const loading = useAppSelector(selectLoading);\n  const tweets = useAppSelector(selectSortedTweets);\n  const dispatch = useAppDispatch();\n\n  const onNewPage = useCallback(() => {\n    dispatch(tweetsActions.getTweetsNextPage())\n  }, [dispatch]);\n\n  useEffect(() => {\n    dispatch(tweetsActions.getTweets());\n    return () => {\n      dispatch(tweetsActions.setTweets([]));\n    };\n  }, [dispatch]);\n  return (\n    <>\n      <TweetForm />\n      <TweetList\n        tweets={tweets}\n        loading={loading}\n        onNewPage={onNewPage}\n      />\n    </>\n  );\n};\n\nexport default Home;\n"],"names":["className","forcedTopic","connected","useWallet","dispatch","useAppDispatch","useState","content","setContent","topic","setTopic","loading","setLoading","useEffect","useCharsLimit","CONTENT_MAX_CHARS","charsLeft","charsLeftClass","topicDisabled","useMemo","sendDisabled","length","send","e","preventDefault","sendTweet","tweet","tweetsActions","classes","join","TextArea","autoresize","placeholder","value","onChange","target","IconInput","Icon","HashIcon","maxLength","TOPIC_MAX_CHARS","disabled","Button","onClick","DataItem","useAppSelector","selectLoading","tweets","selectSortedTweets","onNewPage","useCallback"],"sourceRoot":""}