{"version":3,"file":"static/js/273.05d3b286.chunk.js","mappings":"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","sources":["hooks/useAppDispatch.ts","hooks/useAppSelector.ts","webpack://solana-twitter-app/./src/components/general/TextArea/TextArea.module.scss?147a","components/general/TextArea/TextArea.tsx","hooks/useAutoresizeTextarea.ts","webpack://solana-twitter-app/./src/components/TweetForm/TweetForm.module.scss?f896","components/TweetForm/TweetForm.tsx","components/general/Button/Button.tsx","webpack://solana-twitter-app/./src/components/general/Button/Button.module.scss?3d2a","webpack://solana-twitter-app/./src/components/general/DataItem/DataItem.module.scss?954a","components/general/DataItem/DataItem.tsx","components/icons/KeyIcon.tsx","pages/Profile.tsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { AppDispatch } from '@/store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport { RootState } from '@/store';\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","// extracted by mini-css-extract-plugin\nexport default {\"textarea\":\"TextArea_textarea__eB0cu\"};","import React, { ComponentPropsWithoutRef, FC, useRef } from 'react';\nimport classes from './TextArea.module.scss';\nimport { useAutoresizeTextarea } from '@/hooks/useAutoresizeTextarea';\n\nexport interface TextAreaProps extends ComponentPropsWithoutRef<'textarea'> {\n  className?: string;\n  autoresize?: boolean;\n}\n\nconst TextArea: FC<TextAreaProps> = ({ className, autoresize, ...props }) => {\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\n\n  useAutoresizeTextarea(autoresize ? textAreaRef : undefined);\n\n  return (\n    <textarea\n      ref={textAreaRef}\n      {...props}\n      className={[classes.textarea, className].join(' ')}\n    />\n  );\n};\n\nexport default TextArea;\n","import { RefObject, useCallback, useEffect } from 'react';\r\n\r\nexport const useAutoresizeTextarea = (textAreaRef?: RefObject<HTMLTextAreaElement>): void => {\r\n  const resizeTextarea = useCallback(() => {\r\n    const element = textAreaRef?.current;\r\n    if (!element) return;\r\n    element.style.height = 'auto';\r\n    element.style.height = element.scrollHeight + 'px';\r\n  }, [textAreaRef]);\r\n\r\n  useEffect(() => {\r\n    const element = textAreaRef?.current;\r\n    if (!element) return;\r\n\r\n    resizeTextarea();\r\n    element.addEventListener('input', resizeTextarea);\r\n    return () => {\r\n      element?.removeEventListener('input', resizeTextarea);\r\n    };\r\n  }, [resizeTextarea, textAreaRef]);\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"form__wrapper\":\"TweetForm_form__wrapper__2kMtH\",\"form__footer\":\"TweetForm_form__footer__nPiA1\",\"form__counter\":\"TweetForm_form__counter__wsHll\"};","import React, { FC, useMemo, useState } from 'react';\nimport TextArea from '@/components/general/TextArea/TextArea';\nimport Button from '@/components/general/Button/Button';\nimport classes from './TweetForm.module.scss';\nimport { useAppSelector } from '@/hooks/useAppSelector';\nimport { useAppDispatch } from '@/hooks/useAppDispatch';\nimport { tweetsActions } from '@/store/reducers/tweets';\n\nexport interface TweetFormProps {\n  className?: string;\n}\n\nconst TweetForm: FC<TweetFormProps> = ({ className }) => {\n  const MAX_CHARS = 280;\n  const { sendLoading } = useAppSelector((state) => state.tweets);\n  const dispatch = useAppDispatch();\n  const [content, setContent] = useState<string>('');\n\n  const handleTextChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setContent(e.target.value);\n  };\n\n  const charsLeft = useMemo<number>(() => {\n    return MAX_CHARS - content.length;\n  }, [content]);\n\n  const charsLeftColor = useMemo<string>(() => {\n    if (charsLeft < 0) return 'text-red-500';\n    if (charsLeft <= 10) return 'text-yellow-500';\n    return 'text-gray-400';\n  }, [charsLeft]);\n\n  const sendDisabled = useMemo<boolean>(() => {\n    return !content.length || charsLeft < 0;\n  }, [content, charsLeft]);\n\n  const send = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n\n    dispatch(tweetsActions.sendTweet({ content }));\n    setContent('');\n  };\n\n  return (\n    <form className={[classes.form__wrapper, className].join(' ')}>\n      <TextArea\n        autoresize\n        placeholder=\"Enter tweet\"\n        value={content}\n        onChange={handleTextChange}\n      />\n      <div className={classes.form__footer}>\n        <span className={[classes.form__counter, charsLeftColor].join(' ')}>{charsLeft} left</span>\n        <Button\n          disabled={sendDisabled}\n          loading={sendLoading}\n          onClick={send}>\n          Send\n        </Button>\n      </div>\n    </form>\n  );\n};\n\nexport default TweetForm;\n","import React, { FC, ComponentPropsWithoutRef, useMemo, useRef, useEffect } from 'react';\nimport classes from './Button.module.scss';\nimport LoaderIcon from '@/components/icons/LoaderIcon';\nimport { SwitchTransition, CSSTransition } from 'react-transition-group';\n\nexport enum ButtonVariants {\n  PRIMARY = 'primary',\n  SECONDARY = 'secondary'\n}\n\nexport interface ButtonProps extends ComponentPropsWithoutRef<'button'> {\n  children?: React.ReactNode;\n  className?: string;\n  loading?: boolean;\n  variant?: ButtonVariants;\n}\n\nconst Button: FC<ButtonProps> = ({\n  children,\n  className,\n  loading,\n  variant = ButtonVariants.PRIMARY,\n  ...props\n}) => {\n  const btnRef = useRef<HTMLButtonElement>(null);\n\n  const variantClassName = useMemo<string>(() => {\n    return classes[`btn--${variant}`];\n  }, [variant]);\n\n  useEffect(() => {\n    if (btnRef.current) {\n      const btnWidth = btnRef.current.offsetWidth;\n      btnRef.current.style.width = `${btnWidth}px`;\n    }\n  }, []);\n\n  return (\n    <button\n      ref={btnRef}\n      {...props}\n      className={[classes.btn, variantClassName, className].join(' ')}>\n      <SwitchTransition mode=\"out-in\">\n        <CSSTransition\n          addEndListener={(node: HTMLElement, done: () => void) => {\n            node.addEventListener('transitionend', done, false);\n          }}\n          key={loading ? 'loader' : 'btn'}\n          classNames=\"fade\"\n          unmountOnExit>\n          {loading ? (\n            <div className={classes.btn__loader}>\n              <LoaderIcon className={classes.loader_color} />\n            </div>\n          ) : (\n            <div className={classes.btn__txt}>{children}</div>\n          )}\n        </CSSTransition>\n      </SwitchTransition>\n    </button>\n  );\n};\n\nexport default Button;\n","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"Button_btn__Nl0XW\",\"btn--primary\":\"Button_btn--primary__wQaO+\",\"loader_color\":\"Button_loader_color__uKVIQ\",\"btn--secondary\":\"Button_btn--secondary__-FVi7\",\"btn__loader\":\"Button_btn__loader__M8Ir4\",\"btn__txt\":\"Button_btn__txt__1DO3e\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"DataItem_item__Eym0s\",\"item__icon\":\"DataItem_item__icon__MRwjp\",\"item__content\":\"DataItem_item__content__3Imge\"};","import React, { FC, SVGProps } from 'react';\nimport classes from './DataItem.module.scss';\n\nexport interface DataItemProps {\n  className?: string;\n  content?: string;\n  Icon?: React.ComponentType<SVGProps<SVGSVGElement>>;\n}\n\nconst DataItem: FC<DataItemProps> = ({ className, content, Icon }) => {\n  return (\n    <div className={[classes.item, className].join(' ')}>\n      {Icon && <Icon className={classes.item__icon} />}\n      <span className={classes.item__content}>{content}</span>\n    </div>\n  );\n};\n\nexport default DataItem;\n","import React, { FC, SVGProps } from 'react';\n\nconst KeyIcon: FC<SVGProps<SVGSVGElement>> = (props) => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      version=\"1.1\"\n      width=\"1em\"\n      height=\"1em\"\n      viewBox=\"0 0 24 24\"\n      {...props}>\n      <path\n        fill=\"currentColor\"\n        d=\"M21 18H15V15H13.3C12.2 17.4 9.7 19 7 19C3.1 19 0 15.9 0 12S3.1 5 7 5C9.7 5 12.2 6.6 13.3 9H24V15H21V18M17 16H19V13H22V11H11.9L11.7 10.3C11 8.3 9.1 7 7 7C4.2 7 2 9.2 2 12S4.2 17 7 17C9.1 17 11 15.7 11.7 13.7L11.9 13H17V16M7 15C5.3 15 4 13.7 4 12S5.3 9 7 9 10 10.3 10 12 8.7 15 7 15M7 11C6.4 11 6 11.4 6 12S6.4 13 7 13 8 12.6 8 12 7.6 11 7 11Z\"\n      />\n    </svg>\n  );\n};\n\nexport default KeyIcon;\n","import React, { FC, useMemo } from 'react';\nimport DataItem from '@/components/general/DataItem/DataItem';\nimport KeyIcon from '@/components/icons/KeyIcon';\nimport TweetForm from '@/components/TweetForm/TweetForm';\nimport { useWallet } from '@solana/wallet-adapter-react';\n\nconst Profile: FC = () => {\n  const { publicKey } = useWallet();\n\n  const accountAddress = useMemo<string>(() => {\n    return publicKey ? publicKey.toBase58() : '';\n  }, [publicKey]);\n\n  return (\n    <>\n      <DataItem\n        Icon={KeyIcon}\n        content={accountAddress}\n      />\n      <TweetForm />\n    </>\n  );\n};\n\nexport default Profile;\n"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","className","autoresize","props","textAreaRef","useRef","resizeTextarea","useCallback","element","current","style","height","scrollHeight","useEffect","addEventListener","removeEventListener","useAutoresizeTextarea","undefined","ref","classes","join","sendLoading","state","tweets","dispatch","useState","content","setContent","charsLeft","useMemo","length","charsLeftColor","sendDisabled","placeholder","value","onChange","e","target","Button","disabled","loading","onClick","preventDefault","tweetsActions","ButtonVariants","children","variant","PRIMARY","btnRef","variantClassName","btnWidth","offsetWidth","width","SwitchTransition","mode","CSSTransition","addEndListener","node","done","classNames","unmountOnExit","LoaderIcon","Icon","xmlns","version","viewBox","fill","d","publicKey","useWallet","accountAddress","toBase58","KeyIcon"],"sourceRoot":""}